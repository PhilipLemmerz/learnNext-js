Learnings next.js
______________________________________


> Routing
> Routing mit dynamic Parmams als file oder foldername  [id]
> Routing wo wir den komplette Pfad extrahieren (z.B 2022/12)
> Verlinken statisch oder dynamisch
> durch Objekt loopen und links erstellen
> programmatsich routen
> Eigene 404 Page
> Icons einbinden -> JSX Code von HeroIcons kopieren und einbinden !!

> Rendering
> 4 Arten -> getStaticProps() -> Daten laden bevor Response gesnedet wird und fertige HTML zurücksenden -> Anwendungsfall pages die Daten von Datenbanken oder FileSystem brauchen
          -> getStaticPaths() -> dynamische Seiten vorendern um fertige Seite zurückzugeben bei paths [id] z.B. -> Anwendungsfall pages die auf basis dynamischen Params generiert werden
          -> getServerSideProps() -> Seiten für jeden Request auf ServerSeite individuell bauen und dann zurücksenden (wie node.js template-engine) -> Anwendungsfall: Wenn man zugriff auf Req und Res Objekt braucht
          -> dynamisches Laden der Daten auf ClientSide mit useEffect() wie bei React normal (für admin bereiche sinnvoll wo SEO unwichtig ist) -> Anwendungsfall: Bestellübersicht eines Users
          -> dynamisches Nachladen von data kann mit getStaticProps() auch kombiniert werden um einen initialen Content anzuzeigen. Kombination mit ServerSideProps() macht keinen Sinn.

> dynamisches Laden auf ClientSide kann mit normalen useEffect() implementiert haben oder mit der Helper Function useSWR() von vercel 
mit der dies etwas eindacher implementiert werden kann. (siehe Video Page Prerendering & Data Fetching > Using the "useSWR" NextJS Hook)

Am Beispiel projectRouting
> All EventsPage wäre eine getStaticProps() mit einem revalidate von 1 minute z.B.
> EventDetailPage wäre auch getStaticProps() mit getStaticPath() um next die Anzahl der möglichen Seiten mitzuteilen -> fallback wäre hier false denn wir haben alle möglichen paths angegeben
> EventFilter -> wäre eine geServerSideProps() Page den wir haben sehr viele verschiedene Varianten wo Prerendering zu Aufwändig wäre

Header
> import Head from next/Head
> können dann mit <Head> </Head> die meta tags pro Seite einbinden
> können auch dynamische Werte setzen mit {Variable}
> ViewPort Head tag kann auch im _app.js gesetzt werden -> damit ist es auf allen Seiten verfügbar (wie Layout)
> alle Head Sections werden gemerged (z.B. aus _app.js und index.js) -> bei 2 gleichen Head Tags wird das letzte genommen
> wir können in _app.js einen Fallback Title setzen und diesen dann auf den pages überschreiben -> damit haben wir den Fallback Title auch dann wenn wir vergessen einen zu setzen

Documents.js
> Hier können wir die allegemeine HTML Struktur bearbeiten

Image
> das <Image /> tag rechnet Bilder automatisch klein und läd Sie erst dann nach wenn Sie sichbar sind -> also perferkt optimiert 


APIs bauen mit next.js
> Wir können in next.js auch apis bauen
> hiefür benötigen wir im Ordner pages einen Unterordner mit /api wo wir routen ablengen können
> orientiert sich an der express.js Synatx
> API Funktionen können aus dem api Folder in den Pages folder importiert werden und dann Serverseitig mit getStaticProps() etc. ausgeführt werden ohne HttpRequests
> Wir können dynamische APIs bauen genauso wie dynamische Seiten mit [] für params 
> Für Parmas haben wir ein Beispiel in api/[id] im Zusammenspiel mit feedback.js im ProjectRouting


App Wide State
> um einen App Wide State zu erzeugen gehen wir genauso vor wie in React mit einem Wrapper und die Componenten
  die einen gleichen State benötigen.
> Siehe hierzu die implementierung in LearningReact Repo


Blog App

Struktur
 > Häufig enhält die Page nur eine Auflistung von verschiedenen Components die die Sektionen der Page darstellen
 > Im Component Ordner haben wir dann einen HomePage Folder der die Components <OurServices> etc dann beeinhaltet.
 > Damit haben wir eine bessere Wierverwertbarkeit als wenn wir den jsx Code direkt in der Page schreiben.

Images 
 > path ist immer /images/<name> -> wir müssen kein public angeben beim path-constructing
 > <Image layout="responsive"/> -> durch das Layout tag haben wir die möglichkeit contain und cover wenn man so will zu setzen 

<Link> Tag
 > Wenn wir eine Component in einem Link rendern anstelle von plain text müssen wir das anker tag schreiben.
 <Link href="/">  <a> <Logo /> </a> </Link>

 > Das selbe gilt auch für komplexere <div> strukturen die auch in einem Link sein sollen

 Markdown nutzen
  > auch in next können wir markdown nutzen 
  > um markdown in html umzuwandeln benötigen das package react-markdown (npm i react-markdown)
  > wird importiert als import ReactMarkdown from 'react-markdown'.
  > um den Code umzuwandeln schreiben wir: <ReactMarkdown> {markdownContent} </ReactMarkdown>
  > der Markdown Text wird von der ReactMarkdown Component gewrappet und damit in jsx umgewandelt.


Deployment
 > Wir können eine Server App bauen die einen Server benötigt oder eine StaticSite bauen wie mit einem SSG
 > mit npm run build bauen wir eine ServerSite App die auf einem NodeJS Server laufen muss. 
 > mit npm run next export bauen wir den Static Build
 > getServerSideProps() Fallback of getStaticPaths() und api Folder sind nicht verfügbar bei eineM StaticDeployment
 > auch revalidate Option ist nicht verfügbar
 > auch Image Optimierung benötigt Server Side Logic
 > In next.config.js setzten wir alle env Variablen
 > nach npm run build die kb überprüfen
 > einfaches Deployment mit vercel 

 > Static Side Deployment
 > erst npm runbuild und dann npm  run export ausführen
 > Dann haben wir einen Ordner out der die Dateien enthält


 Authentication
  > NextAuth ist das Package mit dem Authentication umgesetzt wird.
  > in diesem Projekt wird next auth 3 genutzt -> später besser die aktuelle Version
  > die authentication Routes müssen unter api in einem auth Ordner gespeichert werden 
  > die filenames können wir aussuchen -> Sie dürfen aber nicht mit den hier genannten von next.js kollidieren -> https://next-auth.js.org/getting-started/rest-api







______________________________________